{"version":3,"sources":["webpack:///./src/components/navigation.js","webpack:///./src/templates/tags.js"],"names":["Navigation","_ref","nextPath","previousPath","nextLabel","previousLabel","react_default","a","createElement","className","style","navigation","button","gatsby_browser_entry","to","iconPrev","buttonText","iconNext","propTypes","PropTypes","string","__webpack_require__","d","__webpack_exports__","postsQuery","Tags","data","_ref$pageContext","pageContext","nextPagePath","previousPagePath","tag","posts","allMarkdownRemark","edges","Fragment","seo","layout","fontWeight","float","map","_ref2","node","post","key","id","title","frontmatter","date","path","tags","coverImage","excerpt","autoExcerpt","object","isRequired","shape"],"mappings":"6LAMMA,EAAa,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,aAAcC,EAA3BH,EAA2BG,UAAWC,EAAtCJ,EAAsCI,cAAtC,OACjBF,GAAgBD,EACdI,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAMC,YACnBR,GACCG,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAME,QACrBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAIX,GACRG,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAMK,UAAvB,KACAT,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAMM,YAAaX,KAIzCH,GACCI,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAME,QACrBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAIZ,GACRI,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAMM,YAAaZ,GACpCE,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAMO,UAAvB,QAKN,MAENjB,EAAWkB,UAAY,CACrBhB,SAAUiB,IAAUC,OACpBjB,aAAcgB,IAAUC,OACxBhB,UAAWe,IAAUC,OACrBf,cAAec,IAAUC,QAGZpB,QCnCfqB,EAAAC,EAAAC,EAAA,+BAAAC,IAWA,IAAMC,EAAO,SAAAxB,GAGP,IAFJyB,EAEIzB,EAFJyB,KAEIC,EAAA1B,EADJ2B,YAAeC,EACXF,EADWE,aAAcC,EACzBH,EADyBG,iBAAkBC,EAC3CJ,EAD2CI,IAGjBC,EAC1BN,EADFO,kBAAqBC,MAGvB,OACE5B,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4B,SAAA,KACE7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,MACA9B,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,KACE/B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,mBACkBH,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAE4B,WAAY,SAA3B,IAAuCP,GACvDzB,EAAAC,EAAAC,cAAA,QAAME,MAAO,CAAE6B,MAAO,UACpBjC,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,SAAT,iBADF,MAC0CR,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAMC,GAAG,cAAT,cAI3CkB,EAAMQ,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACTpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CACEC,IAAKF,EAAKG,GACVC,MAAOJ,EAAKK,YAAYD,MACxBE,KAAMN,EAAKK,YAAYC,KACvBC,KAAMP,EAAKK,YAAYE,KACvBC,KAAMR,EAAKK,YAAYG,KACvBC,WAAYT,EAAKK,YAAYI,WAC7BC,QAASV,EAAKK,YAAYK,SAAWV,EAAKU,QAAQC,gBAItD/C,EAAAC,EAAAC,cAACG,EAAD,CACER,aAAc2B,EACdzB,cAAc,cACdH,SAAU2B,EACVzB,UAAU,mBAOpBqB,EAAKP,UAAY,CACfQ,KAAMP,IAAUmC,OAAOC,WACvB3B,YAAaT,IAAUqC,MAAM,CAC3B3B,aAAcV,IAAUC,OACxBU,iBAAkBX,IAAUC,UAIzB,IAAMI,EAAU,aA4CRC","file":"component---src-templates-tags-js-6fde082375ad0003933c.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'gatsby'\n\nimport style from '../styles/navigation.module.css'\n\nconst Navigation = ({ nextPath, previousPath, nextLabel, previousLabel }) =>\n  previousPath || nextPath ? (\n    <div className={style.navigation}>\n      {previousPath && (\n        <span className={style.button}>\n          <Link to={previousPath}>\n            <span className={style.iconPrev}>←</span>\n            <span className={style.buttonText}>{previousLabel}</span>\n          </Link>\n        </span>\n      )}\n      {nextPath && (\n        <span className={style.button}>\n          <Link to={nextPath}>\n            <span className={style.buttonText}>{nextLabel}</span>\n            <span className={style.iconNext}>→</span>\n          </Link>\n        </span>\n      )}\n    </div>\n  ) : null\n\nNavigation.propTypes = {\n  nextPath: PropTypes.string,\n  previousPath: PropTypes.string,\n  nextLabel: PropTypes.string,\n  previousLabel: PropTypes.string,\n}\n\nexport default Navigation\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { graphql, Link } from 'gatsby'\n\nimport SEO from '../components/seo'\nimport Layout from '../components/layout'\nimport Post from '../components/post'\nimport Navigation from '../components/navigation'\n\n// import '../styles/layout.css'\n\nconst Tags = ({\n  data,\n  pageContext: { nextPagePath, previousPagePath, tag },\n}) => {\n  const {\n    allMarkdownRemark: { edges: posts },\n  } = data\n\n  return (\n    <>\n      <SEO />\n      <Layout>\n        <div className=\"infoBanner\">\n          Posts with tag: <span style={{ fontWeight: 'bold' }}>#{tag}</span>\n          <span style={{ float: 'right' }}>\n            <Link to=\"/blog\">Remove filter</Link> | <Link to=\"/blog/tags\">All tags</Link>\n          </span>\n        </div>\n\n        {posts.map(({ node }) => (\n          <Post\n            key={node.id}\n            title={node.frontmatter.title}\n            date={node.frontmatter.date}\n            path={node.frontmatter.path}\n            tags={node.frontmatter.tags}\n            coverImage={node.frontmatter.coverImage}\n            excerpt={node.frontmatter.excerpt || node.excerpt.autoExcerpt}\n          />\n        ))}\n\n        <Navigation\n          previousPath={previousPagePath}\n          previousLabel=\"Newer posts\"\n          nextPath={nextPagePath}\n          nextLabel=\"Older posts\"\n        />\n      </Layout>\n    </>\n  )\n}\n\nTags.propTypes = {\n  data: PropTypes.object.isRequired,\n  pageContext: PropTypes.shape({\n    nextPagePath: PropTypes.string,\n    previousPagePath: PropTypes.string,\n  }),\n}\n\nexport const postsQuery = graphql`\n  query($limit: Int!, $skip: Int!, $tag: String!) {\n    allMarkdownRemark(\n      filter: {\n        fileAbsolutePath: { regex: \"//posts//\" },\n        frontmatter: { tags: { in: [$tag] }, published: { eq: true } }\n      }\n      sort: {\n        fields: [frontmatter___date], order: DESC\n      }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          id\n          excerpt\n          timeToRead\n          wordCount {\n            paragraphs\n            sentences\n            words\n          }\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM YYYY\")\n            path\n            excerpt\n            tags\n            published\n            coverImage {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Tags\n"],"sourceRoot":""}