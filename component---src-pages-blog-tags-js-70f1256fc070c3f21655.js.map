{"version":3,"sources":["webpack:///./src/pages/blog/tags.js","webpack:///./src/helpers/index.js"],"names":["data","tagsGrouped","allMarkdownRemark","edges","forEach","post","node","frontmatter","tags","tag","Object","keys","map","key","to","toKebabCase","className","style","module","exports","value","replace","RegExp"],"mappings":"0MAce,qBACb,IAAMA,EAAI,OAyBJC,EAAc,GASpB,OARAD,EAAKE,kBAAkBC,MAAMC,SAAQ,SAAAC,GAC/BA,EAAKC,MAAQD,EAAKC,KAAKC,aAAeF,EAAKC,KAAKC,YAAYC,MAC9DH,EAAKC,KAAKC,YAAYC,KAAKJ,SAAQ,SAAAK,GACjCR,EAAYQ,IAAQR,EAAYQ,IAAQ,GAAK,QAMjD,oCACE,kBAAC,IAAD,MACA,kBAAC,IAAD,KACE,yCACCC,OAAOC,KAAKV,GAAaW,KAAI,SAAAH,GAAG,OAC/B,uBAAGI,IAAKJ,GACN,kBAAC,IAAD,CAAMK,GAAE,aAAeC,sBAAYN,GAA3B,IAAoCI,IAAKE,sBAAYN,IAC3D,0BAAMO,UAAWC,IAAMR,KAAvB,IAA8BA,IAEhC,mCAASR,EAAYQ,GAArB,a,iCC3DZS,EAAOC,QAAQJ,YAAc,SAASK,GACpC,OAAOA,EAAMC,QAAQ,IAAIC,OAAO,aAAc,OAAQ,O","file":"component---src-pages-blog-tags-js-70f1256fc070c3f21655.js","sourcesContent":["import React from 'react'\n// import PropTypes from 'prop-types'\nimport { graphql, useStaticQuery, Link } from 'gatsby'\n\nimport SEO from '../../components/seo'\nimport Layout from '../../components/layout'\nimport { toKebabCase } from '../../helpers'\n\nimport style from '../../styles/post.module.css'\n\n// TODO\n// - order tags alphabetically\n// - get post info for each tag ?\n\nexport default () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allMarkdownRemark(\n        filter: {\n          fileAbsolutePath: { regex: \"//posts//\" },\n          frontmatter: { published: { eq: true } }\n        }\n      ) {\n        edges {\n          node {\n            id\n            frontmatter {\n              title\n              date(formatString: \"DD MMMM YYYY\")\n              path\n              excerpt\n              tags\n              published\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  const tagsGrouped = {}\n  data.allMarkdownRemark.edges.forEach(post => {\n    if (post.node && post.node.frontmatter && post.node.frontmatter.tags) {\n      post.node.frontmatter.tags.forEach(tag => {\n        tagsGrouped[tag] = (tagsGrouped[tag] || 0) + 1\n      })\n    }\n  })\n\n  return (\n    <>\n      <SEO />\n      <Layout>\n        <h1>Blog Tags</h1>\n        {Object.keys(tagsGrouped).map(tag => (\n          <p key={tag}>\n            <Link to={`/blog/tag/${toKebabCase(tag)}/`} key={toKebabCase(tag)}>\n              <span className={style.tag}>#{tag}</span>\n            </Link>\n            <span> ({tagsGrouped[tag]})</span>\n          </p>\n        ))}\n      </Layout>\n    </>\n  )\n}","module.exports.toKebabCase = function(value) {\n  return value.replace(new RegExp('(\\\\s|_|-)+', 'gmi'), '-')\n}\n"],"sourceRoot":""}