{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/goodreads-add-books","webpackCompilationHash":"96a2f1d7d47d713cbb7a","result":{"data":{"markdownRemark":{"id":"64141dd9-ee51-545e-8333-7b1ea2ba55db","html":"<p><a href=\"https://www.goodreads.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Goodreads</a> is a website that helps you track and share the books your read. It's a great platform, easily on my Top-10-websites list <img class=\"emoji\" draggable=\"false\" alt=\"&#x2728;\" src=\"https://twemoji.maxcdn.com/2/72x72/2728.png\" style=\"height: 1em; width: 1em; margin: 0 .05em 0 .1em; vertical-align: -0.1em;\"></p>\n<p>Many of the books are - I believe - added automatically from Amazon (it was bought by Amazon in 2013), but users can also add missing books, as well as edit current ones. You need to be a regular user and request for a librarian status.</p>\n<p>You guessed it, over the past few years I've started spending more and more time improving the data of the website. Goodreads tells me I've done 789 edits in the last 12 months! From including small authors who's book I've stumbled on, to adding the ebook version of a more important work, or just combining multiple editions of a same book. One goal of having cleaner data, on top of helping the community, is to improve my <a href=\"https://calibre-ebook.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Calibre</a> ebook library and making it sync successfully with my Goodreads account.</p>\n<p>Anyways, after having added dozens of book, I considered ways to automate this process. Most of the books I add are ebooks, that are found on <a href=\"https://www.kobo.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kobo.com</a>. Wouldn't it be great to automatically extract the book details from Kobo and add them to Goodreads? Let's find out.</p>\n<h2>Goodreads API</h2>\n<p>Goodreads' API (docs <a href=\"https://www.goodreads.com/api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">here</a>) is great and very thorough, covering most of the possible interactions a user can have with the website... except creating a book <img class=\"emoji\" draggable=\"false\" alt=\"&#x1F605;\" src=\"https://twemoji.maxcdn.com/2/72x72/1f605.png\" style=\"height: 1em; width: 1em; margin: 0 .05em 0 .1em; vertical-align: -0.1em;\"></p>\n<p>So we'll have to find another way to upload the book data.</p>\n<h2>Scraping Kobo</h2>\n<p>Kobo doesn't have an API, so we'll be scraping the book's page to get the info we need.</p>\n<p>For each string that we want to extract, we find the unique 'query selector' related to this element. In Firefox, right click on the element and select 'Inspect Element'. Then on the 'Inspector' tab, right click on the corresponding HTML line, and select 'Copy > CSS Selector'.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\">// <span class=\"token property\">ex</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'isbn'</span> field\n.bookitem-secondary-metadata > <span class=\"token property\">ul</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span>2<span class=\"token punctuation\">)</span> > <span class=\"token property\">li</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span>4<span class=\"token punctuation\">)</span> > <span class=\"token property\">span</span><span class=\"token punctuation\">:</span><span class=\"token function\">nth-child</span><span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If you switch to the 'Console' tab, you can see now retrieve this field by running <code class=\"language-text\">document.querySelector(&#39;YOUR-CSS-SELECTOR&#39;).textContent</code>. Depending on the HTML element, we will use <code class=\"language-text\">textContent</code> or other (such as <code class=\"language-text\">src</code> for images) to retrieve the actual raw text.</p>\n<p>Let's populate a JSON list that contains all the fields we are interested in, and their corresponding selector. We also add some additional info that will be useful later on.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// ex: 'isbn' object</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"isbn\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"koboQuerySelector\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".bookitem-secondary-metadata > ul:nth-child(2) > li:nth-child(4) > span:nth-child(1)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"koboFieldSelector\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"textContent\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"goodreadsFormId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Automatically filling a form</h2>\n<p>Now that we understand how to extract the fields from Kobo, back to Goodreads where we'll need to fill the <a href=\"https://www.goodreads.com/book/new\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">'Add a New Book' form</a>.</p>\n<p>Similarly to above, we dive into the console to find the Goodreads form id of the corresponding field. Again, switching to the 'Console' tab, we can now fill the form by running <code class=\"language-text\">document.querySelector(&#39;YOUR-FORM-ID&#39;).value = YOUR-VALUE</code>. Let's add this id to our JSON.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// ex: 'isbn' object</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"isbn\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"koboQuerySelector\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".bookitem-secondary-metadata > ul:nth-child(2) > li:nth-child(4) > span:nth-child(1)\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"koboFieldSelector\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"textContent\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"goodreadsFormId\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"book_isbn13\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"defaultValue\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Wrap up</h2>\n<p>We have our Kobo field selectors, and our Goodreads form ids. Now we need a script to piece everything together. We'll be running this script directly in the Goodreads console of the new book form page.</p>\n<p>We're just missing one small thing: how to actually bring data from one website (Kobo) to another (Goodreads). To do this, we'll make an HTTP call to retrieve our book's Kobo HTML page, parse it, and extract the fields programmatically (instead of having the page opened in a new tab).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// code to retrieve the Kobo book page</span>\n<span class=\"token comment\">// if you have issues (possibly CORS), try prepending KOBO_BOOK_URL with 'https://cors-anywhere.herokuapp.com/'</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">KOBO_BOOK_URL</span> <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.kobo.com/us/en/ebook/utopia-for-realists-1'</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token constant\">KOBO_BOOK_URL</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">respHtml</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> parser <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DOMParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> doc <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span><span class=\"token function\">parseFromString</span><span class=\"token punctuation\">(</span>respHtml<span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// extract fields &amp; populate form</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Everything is set, you can now piece everything together and easily add missing Goodreads books with the help of Kobo.</p>\n<h2>Final thoughts</h2>\n<p>This process does help gain some precious seconds, but as you can see it is still far from perfect. A nice API on both sides would have been much much nicer, and some fields don't seem to be retrieved from the <code class=\"language-text\">fetch()</code> query (ex: 'page count' field), probably due to how Kobo's website loads. Altogether an interesting (but slighlty disappointing) weekend project :)</p>\n<p>I also check the form before submitting, so this is not a batch/dirty process. I take great care to have correct data in Goodreads, and also sometimes purchase books on Kobo (if they come without DRM <img class=\"emoji\" draggable=\"false\" alt=\"&#x1F601;\" src=\"https://twemoji.maxcdn.com/2/72x72/1f601.png\" style=\"height: 1em; width: 1em; margin: 0 .05em 0 .1em; vertical-align: -0.1em;\">).</p>\n<p>Improvements needed for v2:</p>\n<ul>\n<li>retrieve the page count from Kobo</li>\n<li>build the upload image workflow</li>\n<li>have only an ISBN as input instead of the full Kobo URL</li>\n<li>manage multiple authors</li>\n<li>another source of data instead of Kobo?</li>\n</ul>\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://www.goodreads.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Goodreads.com</a></li>\n<li><a href=\"https://www.kobo.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kobo.com</a></li>\n<li><a href=\"https://github.com/raphodn/goodreads-anb/blob/master/kobo.com/kobo_scraping.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">my final script</a></li>\n</ul>","excerpt":"Goodreads is a website that helps you track and share the books your read. It's a great platform, easily on my Top-10-websites list  Many of…","timeToRead":4,"wordCount":{"paragraphs":32,"sentences":52,"words":697},"frontmatter":{"title":"Adding books programmatically to Goodreads","date":"08 September 2019","path":"/blog/goodreads-add-books","parent":"blog","excerpt":"","tags":["goodreads","2019"],"published":true,"coverImage":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"type":"posts"}}}